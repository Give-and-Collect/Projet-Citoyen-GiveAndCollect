// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma
model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model User {
  id              Int           @id @default(autoincrement())
  birthDate       DateTime
  firstname       String
  lastname        String
  email           String        @unique
  password        String
  phone           String
  address         String
  city            String
  postalCode      String
  latitude        Float?
  longitude       Float?
  nomOrganisation String?
  profilePicture  String?
  role            Role          @relation(fields: [roleId], references: [id])
  roleId          Int
  events          Event[]
  posts           Post[]
  Message         Message[]
  Participate     Participate[]
}

model Event {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  address      String
  city         String
  postalCode   String
  latitude     Float
  longitude    Float
  startDate    DateTime
  endDate      DateTime
  phone        String
  creationDate DateTime
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  Int
}

model Post {
  id           Int      @id @default(autoincrement())
  address      String
  city         String
  postalCode   String
  latitude     Float
  longitude    Float
  description  String
  creationDate DateTime
  author       User     @relation(fields: [authorId], references: [id])
  authorId     Int
  postType     PostType @relation(fields: [postTypeId], references: [id])
  postTypeId   Int
  items        Item[]
}

model PostType {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Item {
  id         Int      @id @default(autoincrement())
  size       String
  quantity   Int
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Category {
  id              Int        @id @default(autoincrement())
  name            String
  parentCategory  Category?  @relation("ParentChild", fields: [categoryId], references: [id])
  categoryId      Int?
  childCategories Category[] @relation("ParentChild")
  items           Item[]
}

model CollectionPoint {
  id          Int     @id @default(autoincrement())
  address     String
  city        String
  postalCode  String
  latitude    Float
  longitude   Float
  description String
  isActive    Boolean @default(true)
}

model Message {
  id             Int          @id @default(autoincrement())
  messageDate    DateTime
  body           String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
}

model Conversation {
  id           Int           @id @default(autoincrement())
  creationDate DateTime
  messages     Message[]
  Participate  Participate[]
}

model Participate {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
}
